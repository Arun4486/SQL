CREATE DATABASE student;
-- CREATE DATABASE IF NOT EXISTS student;
-- DROP DATABASE student;
-- DROP DATABASE IF EXISTS COMPANY;
USE student;
CREATE TABLE std (
    id INT PRIMARY KEY,
    name VARCHAR(40),
    age INT
);

INSERT INTO std VALUES(1, "AMAN", 21);
INSERT INTO std VALUES(2, "AKASH", 22); 

SELECT * FROM std;

SHOW DATABASES;

SHOW TABLES;

-- TABLE RELATED QUERIES
-- 1. CREATE
CREATE TABLE TB1(
ID INT PRIMARY KEY,
NAME VARCHAR(10)
);
-- 2. INSERT
INSERT INTO TB1 VALUES(01, "ABC");  
INSERT INTO TB1 VALUES(02, "XYZ");
-- OR
INSERT INTO TB1 (ID, NAME) VALUES
(01, "ABC"),
(02, "XYZ"); 
-- TO ADD SINGLE VALUE IN TABLE
INSERT INTO TB1 (ID) VALUES (03); 
-- 03. SELECT
SELECT * FROM TB1;

-- 4. DROP
DROP TABLE TB1; 


-- TASK 1

CREATE DATABASE TCS;
USE TCS;
CREATE TABLE EMP(
ID INT PRIMARY KEY,
NAME VARCHAR(20),
SALARY INT
); 
INSERT INTO EMP (ID,  NAME , SALARY) VALUES
(1, "ADAM" , 25000),
(2, "BOB", 30000),
(3, "CASEY", 40000);
SELECT * FROM EMP;

USE TCS;
CREATE TABLE UNIQ (
UNIQ_ID INT unique
);
INSERT INTO UNIQ values(101);
INSERT INTO UNIQ VALUES(101); -- ERROR DUPLICATE ENTRY

CREATE TABLE DEF(
	ID INT PRIMARY KEY,
    SALARY INT DEFAULT 25000
    );
INSERT INTO DEF (ID) VALUES (101);
SELECT * FROM DEF; -- 2500 ADDED WITHOUT ADDING

USE TCS; 
CREATE TABLE CHEK ( 
	AGE INT CHECK (AGE >= 18)
);
INSERT INTO CHEK VALUES (17); -- CHECK CONSTAINT IS VOOILATED

-- SELECT COMMAND
CREATE DATABASE COLLAGE;
USE COLLAGE;
CREATE TABLE STUDENTS (
ROLLNO INT PRIMARY KEY,
NAME VARCHAR(20),
MARKS INT NOT NULL,
GRADE VARCHAR(1),
CITY VARCHAR(20)
);

INSERT INTO STUDENTS (ROLLNO, NAME , MARKS, GRADE, CITY)
VALUES
(101, "ANIL", 78, "C", "PUNE"),
(102, "BHUMIKA", 93, "A", "MUMBAI"),
(103, "CHETAN", 85, "B", "MUMBAI"),
(104, "DHRUV", 96, "A", "DELHI"),
(105, "EMANUAL", 12, "F", "DELHI"),
(106, "FARAH", 82, "B", "DELHI");  
USE COLLAGE;
SELECT NAME, MARKS FROM STUDENTS;

-- WHERE
SELECT *
FROM STUDENTS
WHERE MARKS >=80 AND CITY= "DELHI";

SELECT * FROM STUDENTS WHERE MARKS BETWEEN 80 AND 90;
SELECT * FROM STUDENTS WHERE CITY IN ("DELHI", "MUMBAI");
SELECT * FROM STUDENTS WHERE CITY NOT IN ("DELHI", "MUMBAI");
-- find no of students according to each grade
SELECT GRADE, COUNT(NAME) AS NO_OF_STDS
FROM STUDENTS
GROUP BY GRADE
ORDER BY GRADE;

-- LIMIT
SELECT * FROM STUDENTS WHERE MARKS > 75 LIMIT 3;

-- ORDER BY
SELECT * FROM STUDENTS
ORDER BY NAME;

SELECT * FROM STUDENTS 
ORDER BY MARKS DESC
LIMIT 3;

-- having 
SELECT CITY, AVG(MARKS) AS AVE_MARKS
FROM STUDENTS
GROUP BY CITY
HAVING AVG(MARKS) > 85;

SELECT CITY, COUNT(NAME) AS NO_OF_STDS
FROM STUDENTS
GROUP BY CITY
HAVING MAX(MARKS) > 85;

SELECT CITY 
FROM STUDENTS
WHERE GRADE = "A"
GROUP BY CITY
HAVING MAX(MARKS) >= 93
ORDER BY CITY;

-- AGGRIGATE FUNCITONS
SELECT COUNT(*) AS TOTAL_STDS FROM STUDENTS;

SELECT MAX(MARKS) AS MX_MARKS
FROM STUDENTS;

SELECT CITY, COUNT(NAME) 
FROM STUDENTS                   
GROUP BY CITY;

SELECT CITY, NAME , COUNT(NAME)
FROM STUDENTS
GROUP BY CITY, NAME;

-- TO FIND AVE MARKS IN EACH CITY IN ASC ORDER
SELECT CITY, AVG(MARKS) 
FROM STUDENTS
GROUP BY CITY
ORDER BY AVG(MARKS);

-- TO FIND 2ND MAX MARKS
USE COLLAGE;
SELECT * FROM STUDENTS
ORDER BY MARKS DESC
LIMIT 1 OFFSET 1;
-- OR 
SELECT MAX(MARKS) AS SECOND_HIGHEST
FROM STUDENTS
WHERE MARKS < (SELECT MAX(MARKS) FROM STUDENTS);

-- OR
SELECT * FROM STUDENTS
ORDER BY MARKS DESC
LIMIT 1,2; -- (FISRT 1 IS OFFSET, SKIPS THE NO OF ROWS), SECOND IS NO OF ROWS TO BE SHOWN.

CREATE TABLE PAYMENTS (
CUST_ID INT PRIMARY KEY, 
NAME VARCHAR(20),
MODE VARCHAR (20),
CITY VARCHAR (20)
);
INSERT INTO PAYMENTS
(CUST_ID, NAME, MODE, CITY)
VALUES
(101, "OLIVIA", "NB", "PRTLAND"),
(102, "ETHAN", "CC", "MIAMI"),
(103, "MAYA", "CC", "SEATTLE"),
(104, "LIAM", "NB", "DENVER"),
(105, "SOPHIA", "CC", "NEW ORLAND"),
(106, "CALEB", "DC", "MINNEAPOLIS"),
(107, "AVA", "DC", "PHOENIX"),
(108, "LUCAS", "NB", "BOSTON"),
(109, "ISABELLA", "NB", "NASHVILLE"),
(110, "JACKSON", "CC", "SOSTON");

SELECT * FROM PAYMENTS;
-- FIND TOTAL PAYMENT ACCORDING TO EACH PAYMENT MODE
SELECT MODE, COUNT(NAME)
FROM PAYMENTS
GROUP BY MODE;

-- UPDATE
USE COLLAGE;
UPDATE PAYMENTS
SET CITY = "NY"
WHERE CUST_ID = 102;
SELECT * FROM PAYMENTS WHERE CUST_ID = 102;

-- SAFE MODE
SET SQL_SAFE_UPDATES = 0;

-- DELETE
DELETE FROM PAYMENTS
WHERE NAME = "LUCAS";
SELECT * FROM PAYMENTS;

-- connecting two table by FK
USE COLLAGE;
CREATE TABLE DEPT (
	ID INT PRIMARY KEY,
    NAME VARCHAR(20)
    );
INSERT INTO DEPT (ID, NAME)
VALUES
(101, "SCIENCE"),
(102, "MATHS"),
(103, "HINDI");
SELECT * FROM DEPT;

CREATE TABLE TUTOR (
	TUT_ID INT PRIMARY KEY,
    NAME VARCHAR(20),
    DEPT_ID INT,
    FOREIGN KEY (DEPT_ID) REFERENCES DEPT (ID)
    );
INSERT INTO TUTOR (TUT_ID, NAME , DEPT_ID)
VALUES
(01, "ADOM", 101),
(02, "BOB", 102),
(03, "CASSY", 103);
DROP TABLE DEPT;
-- CASCADING FOR FK
DROP TABLE TUTOR;
CREATE TABLE TUTOR (
	TUT_ID INT PRIMARY KEY,
    NAME VARCHAR(20),
    DEPT_ID INT,
    FOREIGN KEY (DEPT_ID) REFERENCES DEPT (ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
    );
INSERT INTO TUTOR (TUT_ID, NAME , DEPT_ID)
VALUES
(01, "ADOM", 101),
(02, "BOB", 102),
(03, "CASSY", 103);

UPDATE DEPT
SET ID = 104
WHERE ID = 102;
SELECT * FROM DEPT;

SELECT * FROM TUTOR;

-- ALTER 
CREATE TABLE SCORE (
ROLLNO INT PRIMARY KEY,
NAME VARCHAR(20),
MARKS INT NOT NULL,
GRADE VARCHAR(1),
CITY VARCHAR(20)
);

INSERT INTO SCORE (ROLLNO, NAME , MARKS, GRADE, CITY)
VALUES
(101, "ANIL", 78, "C", "PUNE"),
(102, "BHUMIKA", 93, "A", "MUMBAI"),
(103, "CHETAN", 85, "B", "MUMBAI"),
(104, "DHRUV", 96, "A", "DELHI"),
(105, "EMANUAL", 12, "F", "DELHI"),
(106, "FARAH", 82, "B", "DELHI");  
SELECT * FROM SCORE;

ALTER TABLE SCORE
ADD AGE INT DEFAULT 20;
ALTER TABLE SCORE DROP AGE;

ALTER TABLE SCORE
RENAME TO  SCORES;
SELECT * FROM SCORES;

ALTER TABLE SCORES
CHANGE NAME STD_NAME VARCHAR(20);
SELECT * FROM SCORES;

ALTER TABLE SCORES
MODIFY COLUMN AGE VARCHAR(2);
INSERT INTO SCORES (ROLLNO, MARKS,  AGE) VALUES (107, 54, 21);
INSERT INTO SCORES (ROLLNO, MARKS,  AGE) VALUES (108, 59, 100); -- ERROR

-- TRUNCATE
TRUNCATE TABLE SCORES;
SELECT * FROM SCORES;

CREATE TABLE STUDS (
ROLLNO INT PRIMARY KEY,
NAME VARCHAR(20),
MARKS INT NOT NULL,
GRADE VARCHAR(1),
CITY VARCHAR(20)
);

INSERT INTO STUDS (ROLLNO, NAME , MARKS, GRADE, CITY)
VALUES
(101, "ANIL", 78, "C", "PUNE"),
(102, "BHUMIKA", 93, "A", "MUMBAI"),
(103, "CHETAN", 85, "B", "MUMBAI"),
(104, "DHRUV", 96, "A", "DELHI"),
(105, "EMANUAL", 12, "F", "DELHI"),
(106, "FARAH", 82, "B", "DELHI");  

ALTER TABLE STUDS
CHANGE COLUMN NAME FULL_NAME VARCHAR (20);
SELECT * FROM STUDS;

DELETE FROM STUDS 
WHERE MARKS < 80;
SELECT * FROM STUDS;

ALTER TABLE STUDS
DROP COLUMN GRADE;
SELECT * FROM STUDS;


USE COLLAGE;
CREATE TABLE TEACHERS (
ID INT PRIMARY KEY,
NAME VARCHAR (20),
SUB VARCHAR(10)
);
INSERT INTO TEACHERS (ID, NAME, SUB)
VALUES
(101, "ABC", "MATHS"),
(102, "XYZ", "HINDI"),
(103, "PQR", "ENGLISH");

CREATE TABLE COURSES (
ID INT PRIMARY KEY,
COURSE VARCHAR(20)
);

INSERT INTO COURSES (ID, COURSE)
VALUES
(01, "HINDI"),
(02, "ENGLISH");

-- INNER JOIN 
SELECT * FROM TEACHERS;
SELECT * FROM COURSES;

SELECT * 
FROM TEACHERS AS T
INNER JOIN COURSES AS C
ON T.SUB = C.COURSE;

-- LEFT JOIN
SELECT * 
FROM TEACHERS AS T
LEFT JOIN COURSES AS S
ON T.SUB = S.COURSE;

-- RIGHT JOIN
SELECT * 
FROM TEACHERS AS T
RIGHT JOIN COURSES AS C
ON T.SUB = C.COURSE;

-- FULL JOIN BY UNION
SELECT * FROM TEACHERS T
LEFT JOIN COURSES C
ON T.SUB = C.COURSE
UNION
SELECT * FROM TEACHERS T
RIGHT JOIN COURSES C
ON T.SUB = C.COURSE;

-- LEFT EXCLUSIVE JOIN

SELECT *
FROM TEACHERS T
LEFT JOIN COURSES C
ON T.SUB = C.COURSE
WHERE C.ID IS NULL;

-- RIGHT EXCLUSIVE JOIN

SELECT *
FROM TEACHERS T
RIGHT JOIN COURSES C
ON T.SUB = C.COURSE
WHERE T.ID IS NULL;

-- FULL EXCLUSIVE JOIN 
INSERT INTO COURSES (ID, COURSE)
VALUES (03, "COMPUTER");

SELECT * FROM TEACHERS T
LEFT JOIN COURSES C
ON T.SUB = C.COURSE
WHERE C.ID IS NULL
UNION
SELECT * FROM TEACHERS T
RIGHT JOIN COURSES C
ON T.SUB = C.COURSE
WHERE T.ID IS NULL;

--  SELF JOIN

CREATE TABLE EMP
(ID INT PRIMARY KEY,
NAME VARCHAR(20),
MANAGER_ID INT);

INSERT INTO EMP (ID, NAME , MANAGER_ID)
VALUES
(101, "ADOM",103),
(102, "BOB", 104),
(103, "CASSY", NULL),
(104, "DONALD", 103);

SELECT A.NAME AS MANAGER_NAME , B.NAME
FROM EMP A
JOIN EMP B
WHERE A.ID = B.MANAGER_ID;

-- UNION
USE COLLAGE;
CREATE TABLE MARKS (
	ID INT PRIMARY KEY,
    NAME VARCHAR(20),
    SCORE INT);

INSERT INTO MARKS (ID, NAME, SCORE)
VALUES
(101, "ADOM", 75),
(102, "BOBBY", 89),
(103, "CASSY", 90),
(104, "DOMNIC", 76),
(105, "ELLIE", 67);

-- 2ND HIGHEST
SELECT * FROM MARKS
ORDER BY SCORE DESC
LIMIT 1,1;

-- ABOVE AVE
SELECT AVG(SCORE)AS AVE_MARKS FROM MARKS; -- 79.4
 

-- EVEN ROLL NO
SELECT * FROM MARKS
WHERE (ID % 2 = 0);

-- MAX MARKS FROM DELHI
ALTER TABLE MARKS
ADD CITY VARCHAR(30);
UPDATE MARKS
SET CITY = "PUNE"
WHERE ID = 101;
UPDATE MARKS
SET CITY = "DELHI"
WHERE ID = 102;
UPDATE MARKS
SET CITY = "HYD"
WHERE ID = 103;
UPDATE MARKS
SET CITY = "MUMBAI"
WHERE ID = 104;
UPDATE MARKS
SET CITY = "GZB"
WHERE ID = 105;

SELECT MAX(SCORE) FROM  MARKS
WHERE CITY = "DELHI";

CREATE VIEW V1 AS
SELECT ID, NAME FROM MARKS;

SELECT * FROM V1;